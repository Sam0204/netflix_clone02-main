{"ast":null,"code":"var _jsxFileName = \"E:\\\\netflix_clone02-main\\\\app\\\\src\\\\components\\\\movie-grid\\\\MovieGrid.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport Button, { OutlineButton } from '../button/Button';\nimport Input from '../input/Input';\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MovieGrid = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n\n      if (keyword === undefined) {\n        const params = {};\n\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            break;\n\n          default:\n            response = await tmdbApi.getTvList(tvType.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n\n      setItems(response.results);\n      setTotalPage(response.total_pages);\n    };\n\n    getList();\n  }, [props.category, keyword]);\n\n  const loadMore = async () => {\n    let response = null;\n\n    if (keyword === undefined) {\n      const params = {\n        page: page + 1\n      };\n\n      switch (props.category) {\n        case category.movie:\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\n            params\n          });\n          break;\n\n        default:\n          response = await tmdbApi.getTvList(tvType.popular, {\n            params\n          });\n      }\n    } else {\n      const params = {\n        page: page + 1,\n        query: keyword\n      };\n      response = await tmdbApi.search(props.category, {\n        params\n      });\n    }\n\n    setItems([...items, ...response.results]);\n    setPage(page + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section mb-3\",\n      children: /*#__PURE__*/_jsxDEV(MovieSearch, {\n        category: props.category,\n        keyword: keyword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        category: props.category,\n        item: item\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 44\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), page < totalPage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid__loadmore\",\n      children: /*#__PURE__*/_jsxDEV(OutlineButton, {\n        className: \"small\",\n        onClick: loadMore,\n        children: \"Load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(MovieGrid, \"gVKJykNS0ZZmAcVWR7yk7gRUMnQ=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieGrid;\n\nconst MovieSearch = props => {\n  _s2();\n\n  const history = useHistory();\n  const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\n  const goToSearch = useCallback(() => {\n    if (keyword.trim().length > 0) {\n      history.push(`/${category[props.category]}/search/${keyword}`);\n    }\n  }, [keyword, props.category, history]);\n  useEffect(() => {\n    const enterEvent = e => {\n      e.preventDefault();\n\n      if (e.keyCode === 13) {\n        goToSearch();\n      }\n    };\n\n    document.addEventListener('keyup', enterEvent);\n    return () => {\n      document.removeEventListener('keyup', enterEvent);\n    };\n  }, [keyword, goToSearch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-search\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Enter keyword\",\n      value: keyword,\n      onChange: e => setKeyword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"small\",\n      onClick: goToSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(MovieSearch, \"I2NExLrNnOoAB+SPN4V+sg7kpxQ=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = MovieSearch;\nexport default MovieGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MovieGrid\");\n$RefreshReg$(_c2, \"MovieSearch\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useHistory","useParams","MovieCard","Button","OutlineButton","Input","tmdbApi","category","movieType","tvType","MovieGrid","props","items","setItems","page","setPage","totalPage","setTotalPage","keyword","getList","response","undefined","params","movie","getMoviesList","upcoming","getTvList","popular","query","search","results","total_pages","loadMore","map","item","i","MovieSearch","history","setKeyword","goToSearch","trim","length","push","enterEvent","e","preventDefault","keyCode","document","addEventListener","removeEventListener","target","value"],"sources":["E:/netflix_clone02-main/app/src/components/movie-grid/MovieGrid.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router';\n\nimport './movie-grid.scss';\n\nimport MovieCard from '../movie-card/MovieCard';\nimport Button, { OutlineButton } from '../button/Button';\nimport Input from '../input/Input'\n\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\n\nconst MovieGrid = props => {\n\n    const [items, setItems] = useState([]);\n\n    const [page, setPage] = useState(1);\n    const [totalPage, setTotalPage] = useState(0);\n\n    const { keyword } = useParams();\n\n    useEffect(() => {\n        const getList = async () => {\n            let response = null;\n            if (keyword === undefined) {\n                const params = {};\n                switch(props.category) {\n                    case category.movie:\n                        response = await tmdbApi.getMoviesList(movieType.upcoming, {params});\n                        break;\n                    default:\n                        response = await tmdbApi.getTvList(tvType.popular, {params});\n                }\n            } else {\n                const params = {\n                    query: keyword\n                }\n                response = await tmdbApi.search(props.category, {params});\n            }\n            setItems(response.results);\n            setTotalPage(response.total_pages);\n        }\n        getList();\n    }, [props.category, keyword]);\n\n    const loadMore = async () => {\n        let response = null;\n        if (keyword === undefined) {\n            const params = {\n                page: page + 1\n            };\n            switch(props.category) {\n                case category.movie:\n                    response = await tmdbApi.getMoviesList(movieType.upcoming, {params});\n                    break;\n                default:\n                    response = await tmdbApi.getTvList(tvType.popular, {params});\n            }\n        } else {\n            const params = {\n                page: page + 1,\n                query: keyword\n            }\n            response = await tmdbApi.search(props.category, {params});\n        }\n        setItems([...items, ...response.results]);\n        setPage(page + 1);\n    }\n\n    return (\n        <>\n            <div className=\"section mb-3\">\n                <MovieSearch category={props.category} keyword={keyword}/>\n            </div>\n            <div className=\"movie-grid\">\n                {\n                    items.map((item, i) => <MovieCard category={props.category} item={item} key={i}/>)\n                }\n            </div>\n            {\n                page < totalPage ? (\n                    <div className=\"movie-grid__loadmore\">\n                        <OutlineButton className=\"small\" onClick={loadMore}>Load more</OutlineButton>\n                    </div>\n                ) : null\n            }\n        </>\n    );\n}\n\nconst MovieSearch = props => {\n\n    const history = useHistory();\n\n    const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\n\n    const goToSearch = useCallback(\n        () => {\n            if (keyword.trim().length > 0) {\n                history.push(`/${category[props.category]}/search/${keyword}`);\n            }\n        },\n        [keyword, props.category, history]\n    );\n\n    useEffect(() => {\n        const enterEvent = (e) => {\n            e.preventDefault();\n            if (e.keyCode === 13) {\n                goToSearch();\n            }\n        }\n        document.addEventListener('keyup', enterEvent);\n        return () => {\n            document.removeEventListener('keyup', enterEvent);\n        };\n    }, [keyword, goToSearch]);\n\n    return (\n        <div className=\"movie-search\">\n            <Input\n                type=\"text\"\n                placeholder=\"Enter keyword\"\n                value={keyword}\n                onChange={(e) => setKeyword(e.target.value)}\n            />\n            <Button className=\"small\" onClick={goToSearch}>Search</Button>\n        </div>\n    )\n}\n\nexport default MovieGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}